class Solution {
public:
    class DSU{
        vector<int> parent,size;

    public:
        DSU(int n){
            parent.resize(n);
            size.resize(n,1);
            for(int i=0;i<n;i++)    parent[i]=i;
        }

        int find(int node){
            if(parent[node]==node)  return node;
            return parent[node]=find(parent[node]);
        }

        void unite(int a,int b){
            a=find(a);b=find(b);
            if(a==b)    return;
            if(size[a]<size[b]) parent[a]=b;
            else if(size[a]>size[b])    parent[b]=a;
            else{
                parent[b]=a;
                size[a]++;
            }
        }
    };
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        DSU dsu(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++) if(graph[i][j]==1 and i!=j)   dsu.unite(i,j);
        }

        map<int,int> connected;
        for(int i=0;i<n;i++){
            connected[dsu.find(i)]++;
        }

        map<int,int> infected;
        for(auto i:initial) infected[dsu.find(i)]++;


        int maxi=0;
        sort(initial.begin(),initial.end());
        
        int ans=initial[0];
        for(auto node:initial){
            if(infected[dsu.find(node)]>1)  continue;
            if(connected[dsu.find(node)]>maxi){
                maxi=connected[dsu.find(node)];
                ans=node;
            }
        }
        return ans;
    }
};